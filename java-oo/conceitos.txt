o que são objetos?
 - tudo pode ser um objeto, mas alguns são objetos abstratos. Objetos abstratos são objetos que não se pode tocar
 - um objeto é algo que pode ser: sentido e descrito através de suas características. Podendo ter estados e comportamentos

 ex: Smartphone -> tamanhoTela, qtdArmazenamento, cameraCelular, etc

o que são classes?
 - classes são moldes para criar objetos
 - as classes tem atributos e métodos

    atributos são as características do objeto e os métodos são as ações que o objeto irá executar

packages
    -packages são as pastas onde ficam os arquivos
    -cada package corresponde a uma categoria de classes

        para usar arquivos de um package em outro arquivo que esteja fora desse package utiliza-se o import
        ex: import nomePasta.nomeArquivo;
            - OBS: se o arquivo estiver em uma pasta dentro de outra pasta deve-se importar as pastas até que chegue a package do arquivo.
        para importar todos os arquivos de um package de uma vez só, basta utilizar o asterísco (*)
        ex: import nomePackage.packageSecundario.*;

visibilidade dos atributos
        define se o atributo é público ou privado
        atributos públicos são visíveis em todo o código
        atributos privados só são visíveis na classe que estão

        além dos públicos e privados, também existem os atributos protegidos e padrões

        públicos - public; privados - private; protegidos - protected; padrões - default

        atributos protegidos, são visiveis na classe e no package
        atributos default, são viíveis na classe e no package

getters e setters
        métodos getters (get) são usados para "pegar" os valores dos atributos
        métodos setters (set) são usados para setar, dar um novo valor aos atributos

        ex: getAllData(); - setNome();

construtores
        o nome da classe construtora deve sempre ser o mesmo da classe mãe
        não tem retorno

encapsulamento -> código padronizado, herança -> classes que herdam informações de outras classes, polimorfismo -> mesmo objeto se comporta de forma diferente em classes diferentes e
                  abstração -> usar o que informações importantes
                  
interfaces - > são classes que padronizão métodos para outras classes

a diferença entre o uso de interfaces e de herança -> quando se usa herança o código se torna mais acoplado, mais dependende e a chance de ter que mudar algo em alguma outra
classe filha é grande, enquanto nas interfaces, apenas se garante que uma classe que dependa dela tenha um determinado método, não sendo fortemente dependente
porém, da pra usar os dois juntos